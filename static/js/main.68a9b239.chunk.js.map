{"version":3,"sources":["store/action.tsx","store/index.ts","store/selectors.tsx","components/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setTodosAction","payload","type","SET_TODOS","setUserAction","SET_USER","initialState","todos","user","store","createStore","state","action","DELETE_TODO","filter","todo","id","DELETE_USER","composeWithDevTools","getUserSelector","API_URL","getTodos","url","fetch","then","res","json","TodoList","useState","inputValue","setinputValue","selectValue","setselectValue","dispatch","useDispatch","useEffect","titles","visibleTodo","useSelector","title","toLocaleLowerCase","includes","clickSelectUser","userId","a","ok","Error","status","statusText","deleteTodo","todoId","completed","className","htmlFor","value","onChange","event","target","name","map","checked","readOnly","onClick","CurrentUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68a9b239.chunk.js","sourcesContent":["export enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  DELETE_USER = 'DELETE_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\nexport type Action = SetTodosAction\n| SetUserAction | DeleteUserAction | DeleteTodoAction;\n\nexport interface DeleteUserAction {\n  type: ActionType.DELETE_USER,\n}\n\nexport interface DeleteTodoAction {\n  type: ActionType.DELETE_TODO,\n  payload: number,\n}\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null) => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const deleteTodoAction = (payload: number) => ({\n  type: ActionType.DELETE_TODO,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Action, ActionType } from './action';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case ActionType.DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case ActionType.DELETE_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getFilteredTodosSelector = (titles: string) => {\n  return (state: State) => (state.todos\n    .filter((todo: Todo) => todo.title.toLocaleLowerCase()\n      .includes(titles.toLocaleLowerCase())));\n};\n\nexport const getUserSelector = (state: State) => state.user;\n","import { Todo, User } from './types';\n\nconst API_URL = 'https://mate.academy/students-api/';\nconst API_USERS = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(url: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${url}`)\n    .then(res => res.json());\n}\n\nexport function getUsers(url: string): Promise<User[]> {\n  return fetch(`${API_URL}${url}`)\n    .then(res => res.json());\n}\n\nexport function getUser(url: number): Promise<User> {\n  return fetch(`${API_USERS}${url}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n","// import { type } from 'os';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport {\n  setTodosAction, setUserAction, deleteTodoAction,\n} from '../../store/action';\nimport { getFilteredTodosSelector }\n  from '../../store/selectors';\nimport { getTodos, getUser } from '../api';\n\nexport const TodoList: React.FC = () => {\n  const [inputValue, setinputValue] = useState('');\n  const [selectValue, setselectValue] = useState('all');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos('todos')\n      .then(todos => {\n        dispatch(setTodosAction(todos));\n      });\n  }, []);\n  useEffect(() => {\n    getTodos('todos')\n      .then(todos => {\n        dispatch(setTodosAction(todos));\n      });\n  }, []);\n  let visibleTodo = useSelector(getFilteredTodosSelector(inputValue));\n\n  const clickSelectUser = async (userId: number) => {\n    const user = await getUser(userId);\n\n    dispatch(setUserAction(user));\n  };\n\n  const deleteTodo = (todoId: number) => {\n    dispatch(deleteTodoAction(todoId));\n  };\n\n  switch (selectValue) {\n    case 'all':\n      visibleTodo = visibleTodo.filter(todo => todo);\n      break;\n    case 'active':\n      visibleTodo = visibleTodo.filter(todo => todo.completed === false);\n      break;\n    case 'completed':\n      visibleTodo = visibleTodo.filter(todo => todo.completed === true);\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <label htmlFor=\"input\">\n          Filter\n          {' '}\n          <input\n            id=\"input\"\n            type=\"text\"\n            value={inputValue}\n            onChange={(event) => setinputValue(event.target.value)}\n          />\n        </label>\n        <select\n          name=\"visibleTodos\"\n          id=\"visibleTodos\"\n          value={selectValue}\n          onChange={(event) => setselectValue(event.target.value)}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {visibleTodo.map(todo => (\n            <li className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`} key={todo.id}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__buttons\">\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\"\n                  type=\"button\"\n                  onClick={() => clickSelectUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => deleteTodo(todo.id)}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './CurrentUser.scss';\nimport { getUserSelector }\n  from '../../store/selectors';\nimport { setUserAction } from '../../store/action';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"CurrentUser\">\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user.id}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button type=\"button\" onClick={() => dispatch(setUserAction(null))}>\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './components/styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}